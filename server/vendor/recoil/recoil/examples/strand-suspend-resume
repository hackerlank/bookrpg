#!/usr/bin/env php
<?php
require dirname(__DIR__) . '/vendor/autoload.php';

/**
 * This example shows how to suspend and then resume a strand.
 *
 * This pattern is useful when a strand must wait on some operation that is not
 * coroutine based.
 */

use Recoil\Kernel\Strand\Strand;
use Recoil\Recoil;

Recoil::run(
    function () {
        echo 'Suspending the current strand.' . PHP_EOL;

        // The Recoil::suspend() system call pauses a strand until it is
        // manually resumed. It accepts a callback that is passed the suspended
        // strand object.
        $value = (yield Recoil::suspend(
            function (Strand $strand) {
                // Add a timer that resumes the strand after one second.
                //
                // A value can be returned to the suspended strand using
                // resumeWithValue(), or an exception with resumeWithException()
                $loop = $strand->kernel()->eventLoop();
                $loop->addTimer(
                    1,
                    function () use ($strand) {
                        $strand->resumeWithValue(
                            'The strand was resumed by a timer!'
                        );
                    }
                );
            }
        ));

        echo $value . PHP_EOL;
    }
);
