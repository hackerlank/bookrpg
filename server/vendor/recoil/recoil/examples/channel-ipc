#!/usr/bin/env php
<?php
require dirname(__DIR__) . '/vendor/autoload.php';

/**
 * This example shows how to use stream-based channels for inter-process
 * communication.
 *
 * This script spawns a child process that uses a channel to send 10 objects to
 * the parent process.
 */

use Recoil\Recoil;

/**
 * This function is run by the parent process.
 */
function parentProcess()
{
    // Create a new sub-process.
    //
    // The current event-loop is obtained using with the Recoil::eventLoop()
    // system call.
    $process = new React\ChildProcess\Process($_SERVER['argv'][0] . ' child');
    $process->start(yield Recoil::eventLoop());

    // Create a channel for reading serialized values from the child's STDOUT.
    $channel = new \Recoil\Channel\ReadableStreamChannel(
        new \Recoil\Stream\ReadableReactStream($process->stdout)
    );

    // Read objects from the child process, until it sends NULL ...
    while ($value = (yield $channel->read())) {
        echo 'Read object ' . json_encode($value) . ' from child process.' . PHP_EOL;
    }
}

/**
 * This function is run by the child process.
 */
function childProcess()
{
    // Create a channel for writing serialized values to STDOUT ...
    $channel = new \Recoil\Channel\WritableStreamChannel(
        new \Recoil\Stream\WritablePhpStream(
            fopen('php://stdout', 'w')
        )
    );

    // Send 10 objects to the parent ...
    for ($i = 1; $i <= 10; ++$i) {
        $value = new stdClass;
        $value->id = $i;
        yield $channel->write($value);
    }

    // Send NULL to indicate the end of data ...
    yield $channel->write(null);
    yield $channel->close();
}

// -----------------------------------------------------------------------------

// Run the appropriate coroutine ...
if (isset($_SERVER['argv'][1]) && $_SERVER['argv'][1] === 'child') {
    Recoil::run('childProcess');
} else {
    Recoil::run('parentProcess');
}
