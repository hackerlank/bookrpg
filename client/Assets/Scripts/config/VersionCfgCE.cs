///
/// Generated by bookexcel
/// Do't modify this file directly, modify child class file instead
///

using System;
using System.Collections;
using System.Collections.Generic;
using LitJson;
using bookrpg.config;
using UnityEngine;

namespace bookrpg 
{
    public partial class VersionCfgMgrCE : 
        bookrpg.config.ConfigMgrSingleKey<string, VersionCfg>
    {
        public VersionCfgMgrCE()
        {
            this.SetParser(new TxtParser());
            this.resourceName = "version.txt";
        }

        public string baseVersion { get; protected set; }
        public string lastVersion { get; protected set; }
        public string releaseTime { get; protected set; }
        public string releaseNote { get; protected set; }
        public string versionAddr { get; protected set; }
        public string resourceTableAddr { get; protected set; }
        public string installAddr { get; protected set; }
        public string installAddr2 { get; protected set; }
        public string installMethod { get; protected set; }
        public string updateAddr { get; protected set; }
        public string updateAddr2 { get; protected set; }
        public bool closed { get; protected set; }
        public string closedReason { get; protected set; }

        public override bool Init(string text, string format=null)
        {
            if (base.Init(text, format)) {
                this.baseVersion = (string)GetItem("baseVersion").value;
                this.lastVersion = (string)GetItem("lastVersion").value;
                this.releaseTime = (string)GetItem("releaseTime").value;
                this.releaseNote = (string)GetItem("releaseNote").value;
                this.versionAddr = (string)GetItem("versionAddr").value;
                this.resourceTableAddr = (string)GetItem("resourceTableAddr").value;
                this.installAddr = (string)GetItem("installAddr").value;
                this.installAddr2 = (string)GetItem("installAddr2").value;
                this.installMethod = (string)GetItem("installMethod").value;
                this.updateAddr = (string)GetItem("updateAddr").value;
                this.updateAddr2 = (string)GetItem("updateAddr2").value;
                this.closed = (bool)GetItem("closed").value;
                this.closedReason = (string)GetItem("closedReason").value;
                return true;
            }
            return false;
        }
    }

    public class VersionCfgCE : bookrpg.config.ConfigItemBase 
    {
        public string key;
        public object value;

        ///parse form txt 
        public override bool ParseFrom(IConfigParser parser)
        {
            try{
                switch (parser.currentRow) 
                {
                    case 0:
                        this.key = "baseVersion";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 1:
                        this.key = "lastVersion";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 2:
                        this.key = "releaseTime";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 3:
                        this.key = "releaseNote";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 4:
                        this.key = "versionAddr";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 5:
                        this.key = "resourceTableAddr";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 6:
                        this.key = "installAddr";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 7:
                        this.key = "installAddr2";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 8:
                        this.key = "installMethod";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 9:
                        this.key = "updateAddr";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 10:
                        this.key = "updateAddr2";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                    case 11:
                        this.key = "closed";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<bool>(this.key);
                        } else {
                            this.value = parser.GetValue<bool>("itemValue");
                        }
                        break;
                    case 12:
                        this.key = "closedReason";
                        if (parser.Has(this.key)) {
                            this.value = parser.GetValue<string>(this.key);
                        } else {
                            this.value = parser.GetValue<string>("itemValue");
                        }
                        break;
                }

                _key1 = key;
                return true;

            } catch(Exception e)
            {
                Debug.LogWarning(e.Message);
                return false;
            }
        }
    }
}
