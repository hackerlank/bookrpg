///
/// Generated by bookproto
/// Do't modify this file directly, new partial class file instead.
///
using System;
using System.IO;
using System.Collections.Generic;
using bookrpg.net;
using bookrpg.net.protobuf;

namespace bookrpg.test
{
    public partial class Foo : NetMessage
    {
        private double _double_field = 0;

        public  double double_field
        {
            get{ return _double_field; }
            set
            {
                _double_field = value;
                _hasDouble_field = true;
            }
        }

        private bool _hasDouble_field = false;

        public  bool hasDouble_field { get { return _hasDouble_field; } }

        public  void clearDouble_field()
        {
            double_field = 0;
            _hasDouble_field = false;
        }

        private float _float_field;

        public  float float_field
        {
            get{ return _float_field; }
            set
            {
                _float_field = value;
                _hasFloat_field = true;
            }
        }

        private bool _hasFloat_field = false;

        public  bool hasFloat_field { get { return _hasFloat_field; } }

        public  void clearFloat_field()
        {
            _hasFloat_field = false;
        }

        private int _int32_field;

        public  int int32_field
        {
            get{ return _int32_field; }
            set
            {
                _int32_field = value;
                _hasInt32_field = true;
            }
        }

        private bool _hasInt32_field = false;

        public  bool hasInt32_field { get { return _hasInt32_field; } }

        public  void clearInt32_field()
        {
            _hasInt32_field = false;
        }

        private long _int64_field;

        public  long int64_field
        {
            get{ return _int64_field; }
            set
            {
                _int64_field = value;
                _hasInt64_field = true;
            }
        }

        private bool _hasInt64_field = false;

        public  bool hasInt64_field { get { return _hasInt64_field; } }

        public  void clearInt64_field()
        {
            _hasInt64_field = false;
        }

        private uint _uint32_field;

        public  uint uint32_field
        {
            get{ return _uint32_field; }
            set
            {
                _uint32_field = value;
                _hasUint32_field = true;
            }
        }

        private bool _hasUint32_field = false;

        public  bool hasUint32_field { get { return _hasUint32_field; } }

        public  void clearUint32_field()
        {
            _hasUint32_field = false;
        }

        private ulong _uint64_field;

        public  ulong uint64_field
        {
            get{ return _uint64_field; }
            set
            {
                _uint64_field = value;
                _hasUint64_field = true;
            }
        }

        private bool _hasUint64_field = false;

        public  bool hasUint64_field { get { return _hasUint64_field; } }

        public  void clearUint64_field()
        {
            _hasUint64_field = false;
        }

        private int _sint32_field;

        public  int sint32_field
        {
            get{ return _sint32_field; }
            set
            {
                _sint32_field = value;
                _hasSint32_field = true;
            }
        }

        private bool _hasSint32_field = false;

        public  bool hasSint32_field { get { return _hasSint32_field; } }

        public  void clearSint32_field()
        {
            _hasSint32_field = false;
        }

        private long _sint64_field;

        public  long sint64_field
        {
            get{ return _sint64_field; }
            set
            {
                _sint64_field = value;
                _hasSint64_field = true;
            }
        }

        private bool _hasSint64_field = false;

        public  bool hasSint64_field { get { return _hasSint64_field; } }

        public  void clearSint64_field()
        {
            _hasSint64_field = false;
        }

        private uint _fixed32_field;

        public  uint fixed32_field
        {
            get{ return _fixed32_field; }
            set
            {
                _fixed32_field = value;
                _hasFixed32_field = true;
            }
        }

        private bool _hasFixed32_field = false;

        public  bool hasFixed32_field { get { return _hasFixed32_field; } }

        public  void clearFixed32_field()
        {
            _hasFixed32_field = false;
        }

        private ulong _fixed64_field;

        public  ulong fixed64_field
        {
            get{ return _fixed64_field; }
            set
            {
                _fixed64_field = value;
                _hasFixed64_field = true;
            }
        }

        private bool _hasFixed64_field = false;

        public  bool hasFixed64_field { get { return _hasFixed64_field; } }

        public  void clearFixed64_field()
        {
            _hasFixed64_field = false;
        }

        private int _sfixed32_field;

        public  int sfixed32_field
        {
            get{ return _sfixed32_field; }
            set
            {
                _sfixed32_field = value;
                _hasSfixed32_field = true;
            }
        }

        private bool _hasSfixed32_field = false;

        public  bool hasSfixed32_field { get { return _hasSfixed32_field; } }

        public  void clearSfixed32_field()
        {
            _hasSfixed32_field = false;
        }

        private long _sfixed64_field;

        public  long sfixed64_field
        {
            get{ return _sfixed64_field; }
            set
            {
                _sfixed64_field = value;
                _hasSfixed64_field = true;
            }
        }

        private bool _hasSfixed64_field = false;

        public  bool hasSfixed64_field { get { return _hasSfixed64_field; } }

        public  void clearSfixed64_field()
        {
            _hasSfixed64_field = false;
        }

        private bool _bool_field;

        public  bool bool_field
        {
            get{ return _bool_field; }
            set
            {
                _bool_field = value;
                _hasBool_field = true;
            }
        }

        private bool _hasBool_field = false;

        public  bool hasBool_field { get { return _hasBool_field; } }

        public  void clearBool_field()
        {
            _hasBool_field = false;
        }

        private Enum3 _enum_field;

        public  Enum3 enum_field
        {
            get{ return _enum_field; }
            set
            {
                _enum_field = value;
                _hasEnum_field = true;
            }
        }

        private bool _hasEnum_field = false;

        public  bool hasEnum_field { get { return _hasEnum_field; } }

        public  void clearEnum_field()
        {
            _hasEnum_field = false;
        }

        private string _string_field = "str";

        public  string string_field
        {
            get{ return _string_field; }
            set
            {
                _string_field = value;
                _hasString_field = true;
            }
        }

        private bool _hasString_field = false;

        public  bool hasString_field { get { return _hasString_field; } }

        public  void clearString_field()
        {
            string_field = "str";
            _hasString_field = false;
        }

        private byte[] _bytes_field;

        public  byte[] bytes_field
        {
            get{ return _bytes_field; }
            set
            {
                _bytes_field = value;
                _hasBytes_field = true;
            }
        }

        private bool _hasBytes_field = false;

        public  bool hasBytes_field { get { return _hasBytes_field; } }

        public  void clearBytes_field()
        {
            _hasBytes_field = false;
        }

        private Foo _embedded_field;

        public  Foo embedded_field
        {
            get{ return _embedded_field; }
            set
            {
                _embedded_field = value;
                _hasEmbedded_field = true;
            }
        }

        private bool _hasEmbedded_field = false;

        public  bool hasEmbedded_field { get { return _hasEmbedded_field && _embedded_field != null; } }

        public  void clearEmbedded_field()
        {
            embedded_field = null;
            _hasEmbedded_field = false;
        }

        private List<int> _repeated_int;

        public  List<int> repeated_int
        {
            get{ return _repeated_int; }
            set
            {
                _repeated_int = value;
                _hasRepeated_int = true;
            }
        }

        private bool _hasRepeated_int = false;

        public  bool hasRepeated_int { get { return _hasRepeated_int && _repeated_int != null && _repeated_int.Count > 0; } }

        public  void clearRepeated_int()
        {
            repeated_int = null;
            _hasRepeated_int = false;
        }

        private List<bookrpg.common.Bar> _repeated_obj;

        public  List<bookrpg.common.Bar> repeated_obj
        {
            get{ return _repeated_obj; }
            set
            {
                _repeated_obj = value;
                _hasRepeated_obj = true;
            }
        }

        private bool _hasRepeated_obj = false;

        public  bool hasRepeated_obj { get { return _hasRepeated_obj && _repeated_obj != null && _repeated_obj.Count > 0; } }

        public  void clearRepeated_obj()
        {
            repeated_obj = null;
            _hasRepeated_obj = false;
        }


        public override void ParseFrom(ByteArray stream)
        {
            base.ParseFrom(stream);
			
            int double_fieldCount = 0;
            int float_fieldCount = 0;

            while (stream.bytesAvailable > 0)
            {
                var tag = ReadUtils.ReadTag(stream);
                switch (tag.number)
                {
                    case 0:
                        throw new ProtobufException("Invalid field id: 0, wrong stream");
                    case 1:
                        this.double_field = ReadUtils.Read_TYPE_DOUBLE(stream);
                        double_fieldCount++;
                        break;
                    case 2:
                        this.float_field = ReadUtils.Read_TYPE_FLOAT(stream);
                        float_fieldCount++;
                        break;
                    case 3:
                        this.int32_field = ReadUtils.Read_TYPE_INT32(stream);
                        break;
                    case 4:
                        this.int64_field = ReadUtils.Read_TYPE_INT64(stream);
                        break;
                    case 5:
                        this.uint32_field = ReadUtils.Read_TYPE_UINT32(stream);
                        break;
                    case 6:
                        this.uint64_field = ReadUtils.Read_TYPE_UINT64(stream);
                        break;
                    case 7:
                        this.sint32_field = ReadUtils.Read_TYPE_SINT32(stream);
                        break;
                    case 8:
                        this.sint64_field = ReadUtils.Read_TYPE_SINT64(stream);
                        break;
                    case 9:
                        this.fixed32_field = ReadUtils.Read_TYPE_FIXED32(stream);
                        break;
                    case 10:
                        this.fixed64_field = ReadUtils.Read_TYPE_FIXED64(stream);
                        break;
                    case 11:
                        this.sfixed32_field = ReadUtils.Read_TYPE_SFIXED32(stream);
                        break;
                    case 12:
                        this.sfixed64_field = ReadUtils.Read_TYPE_SFIXED64(stream);
                        break;
                    case 13:
                        this.bool_field = ReadUtils.Read_TYPE_BOOL(stream);
                        break;
                    case 14:
                        this.enum_field = (Enum3)ReadUtils.Read_TYPE_ENUM(stream);
                        break;
                    case 15:
                        this.string_field = ReadUtils.Read_TYPE_STRING(stream);
                        break;
                    case 16:
                        this.bytes_field = ReadUtils.Read_TYPE_BYTES(stream);
                        break;
                    case 17:
                        this.embedded_field = ReadUtils.Read_TYPE_MESSAGE(stream, new Foo()) as Foo;
                        break;
                    case 18:
                        if (this.repeated_int == null)
                        {
                            this.repeated_int = new List<int>();
                        }
                        this.repeated_int.Add(ReadUtils.Read_TYPE_SINT32(stream));
                        break;
                    case 19:
                        if (this.repeated_obj == null)
                        {
                            this.repeated_obj = new List<bookrpg.common.Bar>();
                        }
                        this.repeated_obj.Add(ReadUtils.Read_TYPE_MESSAGE(stream, new bookrpg.common.Bar()) as bookrpg.common.Bar);
                        break;
                    default:
                        ReadUtils.Skip(stream, tag.wireType);
                        break;
                }
            }

            if (double_fieldCount == 0)
            {
                throw new ProtobufException("Required field double_field not readed");
            }
            if (float_fieldCount == 0)
            {
                throw new ProtobufException("Required field float_field not readed");
            }
        }

        public override void WriteTo(ByteArray stream)
        {
            base.WriteTo(stream);

            if (this.hasDouble_field || this.double_field == 0)
            {
                WriteUtils.WriteTag(stream, WireType.Fixed64, 1);
                WriteUtils.Write_TYPE_DOUBLE(stream, this.double_field); 
            } else
            {
                throw new ProtobufException("Required field double_field not set");
            }

            if (this.hasFloat_field)
            {
                WriteUtils.WriteTag(stream, WireType.Fixed32, 2);
                WriteUtils.Write_TYPE_FLOAT(stream, this.float_field); 
            } else
            {
                throw new ProtobufException("Required field float_field not set");
            }

            if (this.hasInt32_field)
            {
                WriteUtils.WriteTag(stream, WireType.Varint, 3);
                WriteUtils.Write_TYPE_INT32(stream, this.int32_field); 
            }

            if (this.hasInt64_field)
            {
                WriteUtils.WriteTag(stream, WireType.Varint, 4);
                WriteUtils.Write_TYPE_INT64(stream, this.int64_field); 
            }

            if (this.hasUint32_field)
            {
                WriteUtils.WriteTag(stream, WireType.Varint, 5);
                WriteUtils.Write_TYPE_UINT32(stream, this.uint32_field); 
            }

            if (this.hasUint64_field)
            {
                WriteUtils.WriteTag(stream, WireType.Varint, 6);
                WriteUtils.Write_TYPE_UINT64(stream, this.uint64_field); 
            }

            if (this.hasSint32_field)
            {
                WriteUtils.WriteTag(stream, WireType.Varint, 7);
                WriteUtils.Write_TYPE_SINT32(stream, this.sint32_field); 
            }

            if (this.hasSint64_field)
            {
                WriteUtils.WriteTag(stream, WireType.Varint, 8);
                WriteUtils.Write_TYPE_SINT64(stream, this.sint64_field); 
            }

            if (this.hasFixed32_field)
            {
                WriteUtils.WriteTag(stream, WireType.Fixed32, 9);
                WriteUtils.Write_TYPE_FIXED32(stream, this.fixed32_field); 
            }

            if (this.hasFixed64_field)
            {
                WriteUtils.WriteTag(stream, WireType.Fixed64, 10);
                WriteUtils.Write_TYPE_FIXED64(stream, this.fixed64_field); 
            }

            if (this.hasSfixed32_field)
            {
                WriteUtils.WriteTag(stream, WireType.Fixed32, 11);
                WriteUtils.Write_TYPE_SFIXED32(stream, this.sfixed32_field); 
            }

            if (this.hasSfixed64_field)
            {
                WriteUtils.WriteTag(stream, WireType.Fixed64, 12);
                WriteUtils.Write_TYPE_SFIXED64(stream, this.sfixed64_field); 
            }

            if (this.hasBool_field)
            {
                WriteUtils.WriteTag(stream, WireType.Varint, 13);
                WriteUtils.Write_TYPE_BOOL(stream, this.bool_field); 
            }

            if (this.hasEnum_field)
            {
                WriteUtils.WriteTag(stream, WireType.Varint, 14);
                WriteUtils.Write_TYPE_ENUM(stream, (int)this.enum_field); 
            }

            if (this.hasString_field && this.string_field != "str")
            {
                WriteUtils.WriteTag(stream, WireType.LengthDelimited, 15);
                WriteUtils.Write_TYPE_STRING(stream, this.string_field); 
            }

            if (this.hasBytes_field)
            {
                WriteUtils.WriteTag(stream, WireType.LengthDelimited, 16);
                WriteUtils.Write_TYPE_BYTES(stream, this.bytes_field); 
            }

            if (this.hasEmbedded_field)
            {
                WriteUtils.WriteTag(stream, WireType.LengthDelimited, 17);
                WriteUtils.Write_TYPE_MESSAGE(stream, this.embedded_field); 
            }

            if (this.hasRepeated_int)
            {
                foreach (var item in this.repeated_int)
                {
                    WriteUtils.WriteTag(stream, WireType.Varint, 18);
                    WriteUtils.Write_TYPE_SINT32(stream, item); 
                }
            }

            if (this.hasRepeated_obj)
            {
                foreach (var item in this.repeated_obj)
                {
                    WriteUtils.WriteTag(stream, WireType.LengthDelimited, 19);
                    WriteUtils.Write_TYPE_MESSAGE(stream, item); 
                }
            }

        }

        public enum Enum3
        {
            a = 1,
            b = 2,
            c = 3,
        }

        public partial class Foo2 : NetMessage
        {
            private int _sint32_field;

            public  int sint32_field
            {
                get{ return _sint32_field; }
                set
                {
                    _sint32_field = value;
                    _hasSint32_field = true;
                }
            }

            private bool _hasSint32_field = false;

            public  bool hasSint32_field { get { return _hasSint32_field; } }

            public  void clearSint32_field()
            {
                _hasSint32_field = false;
            }

            private Enum1 _enum_field;

            public  Enum1 enum_field
            {
                get{ return _enum_field; }
                set
                {
                    _enum_field = value;
                    _hasEnum_field = true;
                }
            }

            private bool _hasEnum_field = false;

            public  bool hasEnum_field { get { return _hasEnum_field; } }

            public  void clearEnum_field()
            {
                _hasEnum_field = false;
            }


            public override void ParseFrom(ByteArray stream)
            {
                base.ParseFrom(stream);
			

                while (stream.bytesAvailable > 0)
                {
                    var tag = ReadUtils.ReadTag(stream);
                    switch (tag.number)
                    {
                        case 0:
                            throw new ProtobufException("Invalid field id: 0, wrong stream");
                        case 1:
                            this.sint32_field = ReadUtils.Read_TYPE_SINT32(stream);
                            break;
                        case 2:
                            this.enum_field = (Enum1)ReadUtils.Read_TYPE_ENUM(stream);
                            break;
                        default:
                            ReadUtils.Skip(stream, tag.wireType);
                            break;
                    }
                }

            }

            public override void WriteTo(ByteArray stream)
            {
                base.WriteTo(stream);

                if (this.hasSint32_field)
                {
                    WriteUtils.WriteTag(stream, WireType.Varint, 1);
                    WriteUtils.Write_TYPE_SINT32(stream, this.sint32_field); 
                }

                if (this.hasEnum_field)
                {
                    WriteUtils.WriteTag(stream, WireType.Varint, 2);
                    WriteUtils.Write_TYPE_ENUM(stream, (int)this.enum_field); 
                }

            }

    
        }
    
    }
}